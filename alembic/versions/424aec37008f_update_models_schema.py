"""update_models_schema

Revision ID: 424aec37008f
Revises: 2f96ffc9837e
Create Date: 2025-10-01 23:00:07.502161

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '424aec37008f'
down_revision: Union[str, None] = '2f96ffc9837e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Note: permissions and events columns already exist, skipping their creation
    
    # 1. Drop target_type column and its index if they exist
    try:
        op.drop_index('ix_githubinstallations_target_type', table_name='githubinstallations')
    except:
        pass  # Index might not exist
    
    try:
        op.drop_column('githubinstallations', 'target_type')
    except:
        pass  # Column might not exist
    
    # 2. Update GitHubInstallations constraints
    try:
        op.drop_index('ix_githubinstallations_installation_id', table_name='githubinstallations')
    except:
        pass
    op.create_index(op.f('ix_githubinstallations_installation_id'), 'githubinstallations', ['installation_id'], unique=False)
    
    try:
        op.create_unique_constraint('uq_githubinstallations_installation_account', 'githubinstallations', ['installation_id', 'account_id'])
    except:
        pass  # Constraint might already exist
    
    # 3. Update Users - change github_user_id from VARCHAR to Integer if needed
    try:
        op.drop_constraint('users_github_user_id_key', 'users', type_='unique')
        op.drop_index('ix_users_github_user_id', table_name='users')
        op.alter_column('users', 'github_user_id',
                   existing_type=sa.VARCHAR(length=255),
                   type_=sa.Integer(),
                   existing_nullable=False)
        op.create_index(op.f('ix_users_github_user_id'), 'users', ['github_user_id'], unique=True)
    except:
        pass  # Might already be Integer type
    
    # 4. Update Repos constraints
    try:
        op.create_unique_constraint('uq_repos_owner_name', 'repos', ['owner_login', 'name'])
    except:
        pass  # Constraint might already exist
    
    # 5. Handle UserRepos table changes if needed
    try:
        # Check if we need to migrate from github_repo_id to repo_id
        # First, drop the foreign key constraint if it exists
        op.drop_constraint('userrepos_github_repo_id_fkey', 'userrepos', type_='foreignkey')
        
        # Add new repo_id column if it doesn't exist
        op.add_column('userrepos', sa.Column('repo_id', sa.Integer(), nullable=True))
        
        # Update repo_id values to match the repos.id for corresponding github_repo_id
        op.execute("""
            UPDATE userrepos 
            SET repo_id = repos.id 
            FROM repos 
            WHERE userrepos.github_repo_id = repos.github_repo_id
        """)
        
        # Make repo_id NOT NULL after populating it
        op.alter_column('userrepos', 'repo_id', nullable=False)
        
        # Drop old column and index
        op.drop_index('ix_userrepos_github_repo_id', table_name='userrepos')
        op.drop_column('userrepos', 'github_repo_id')
        
        # Create new index and constraints
        op.create_index(op.f('ix_userrepos_repo_id'), 'userrepos', ['repo_id'], unique=False)
        op.create_unique_constraint('uq_userrepos_user_repo', 'userrepos', ['user_id', 'repo_id'])
        op.create_foreign_key('fk_userrepos_repo_id', 'userrepos', 'repos', ['repo_id'], ['id'])
    except:
        pass  # Migration might already be applied
    
    # 6. Update Webhooks constraints
    try:
        op.create_unique_constraint('uq_webhooks_repo_github_webhook', 'webhooks', ['repo_id', 'github_webhook_id'])
    except:
        pass  # Constraint might already exist
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Reverse all changes
    op.drop_constraint('uq_webhooks_repo_github_webhook', 'webhooks', type_='unique')
    
    # Reverse UserRepos changes
    op.drop_constraint('fk_userrepos_repo_id', 'userrepos', type_='foreignkey')
    op.drop_constraint('uq_userrepos_user_repo', 'userrepos', type_='unique')
    op.drop_index(op.f('ix_userrepos_repo_id'), table_name='userrepos')
    
    op.add_column('userrepos', sa.Column('github_repo_id', sa.INTEGER(), autoincrement=False, nullable=True))
    
    # Populate github_repo_id from repo_id
    op.execute("""
        UPDATE userrepos 
        SET github_repo_id = repos.github_repo_id 
        FROM repos 
        WHERE userrepos.repo_id = repos.id
    """)
    
    op.alter_column('userrepos', 'github_repo_id', nullable=False)
    op.drop_column('userrepos', 'repo_id')
    
    op.create_index('ix_userrepos_github_repo_id', 'userrepos', ['github_repo_id'], unique=False)
    op.create_foreign_key('userrepos_github_repo_id_fkey', 'userrepos', 'repos', ['github_repo_id'], ['github_repo_id'])
    
    # Reverse Repos changes
    op.drop_constraint('uq_repos_owner_name', 'repos', type_='unique')
    
    # Reverse Users changes
    op.drop_index(op.f('ix_users_github_user_id'), table_name='users')
    op.alter_column('users', 'github_user_id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.create_index('ix_users_github_user_id', 'users', ['github_user_id'], unique=False)
    op.create_unique_constraint('users_github_user_id_key', 'users', ['github_user_id'])
    
    # Reverse GitHubInstallations changes
    op.drop_constraint('uq_githubinstallations_installation_account', 'githubinstallations', type_='unique')
    op.drop_index(op.f('ix_githubinstallations_installation_id'), table_name='githubinstallations')
    op.create_index('ix_githubinstallations_installation_id', 'githubinstallations', ['installation_id'], unique=True)
    
    op.add_column('githubinstallations', sa.Column('target_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.create_index('ix_githubinstallations_target_type', 'githubinstallations', ['target_type'], unique=False)
    
    op.drop_column('githubinstallations', 'events')
    op.drop_column('githubinstallations', 'permissions')
    
    # ### end Alembic commands ###